// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// read_gz_file
std::vector<std::string> read_gz_file(const Rcpp::CharacterVector& file_paths);
RcppExport SEXP _fastgz_read_gz_file(SEXP file_pathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type file_paths(file_pathsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_gz_file(file_paths));
    return rcpp_result_gen;
END_RCPP
}
// read_gz_lines
std::vector<std::string> read_gz_lines(const Rcpp::CharacterVector& file_paths);
RcppExport SEXP _fastgz_read_gz_lines(SEXP file_pathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type file_paths(file_pathsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_gz_lines(file_paths));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastgz_read_gz_file", (DL_FUNC) &_fastgz_read_gz_file, 1},
    {"_fastgz_read_gz_lines", (DL_FUNC) &_fastgz_read_gz_lines, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastgz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
